# The fundamentals of Bash programming - basic gimmicks of bash scripting and terminal usage
+ BASH = "Bourne Again SHell", so naturally the following covers Shell (and beyond)
+ Bash is barely a language. It's more of an OS API script. You can't have 2D arrays, but you can easily look through files or processes.
+ Once you understand the gist of this file, go read:
*   packages cheatsheet for useful commands (packages/tools)
*   linux-admin cheatsheet for common usage of Bash and basic OS operations


>> Basic terminal tricks
>> =====================

> Command "decorators" (just prepend to a command, no need for quotes)
* watch -n <int/float number> <command>     # rerun command on a cleared terminal every n (default: 2) seconds
* time <command>                            # get time measurement for command runtime.
* pv <args> | commad                        # "pipe viewer" - get a progress-bar for your command. Basically a "cat" command with an extra feature
*   pv file1 > file2                        # works as `cat`
*   while true; do sleep 1; done | pv       # puts a progress bar (with elapsed time) even if the job is endless or unknown in size
* eval <command-string>                     # runs given string as a Bash command. Doesn't need to be a single string.
* sudo <command>                            # run the command as superuser (root), unhindered by permission issues

> Save time
* !!        # basically means "last command"
* sudo !!   # rerun last command with sudo permissions

> Usage instructions
* man <command>  # read the manual of the command
*   help  # list built-in Bash commands


>> bash basic utility commands
>> ===========================

* compgen -c  # get list of current commands
* Use $ to reference variables
*   "$my_var": value of variable my_var
*   "$1": first arg in current scope (and so on for each num accordingly)
*   "$@": all args in current scope as separate items ; "$*": all args in current scope concatenated into a unified string ; "$#": args count
*   "$$": current PID
*   "$?": the return code of last operation (can be used to check if it ran successfully)
*   "$(<cmd here>)": run commands within commands (can also be done like so: `<cmd here>`)
*   "${FUNCNAME[0]}": name of current function
*   "${PIPESTATUS[0]}": return-status of first item in pipeline (if previous command has pipes)
* add `& disown` after a command to have it run in its own thread (thats the "&"), disconnected from current terminal-run process (thats the "disown") to prevent termination when the terminal closes
* Use "<" to redirect a file. Example; to use file-contents as input: "./my_script.sh < input.txt"
* Use "<<" ("here-document") to specify on what word (alone, not as an internal part of line) to stop reading text.
* Use "<<<" ("here-string") to input a string as if it came from a file. For example, when running via while-loop on lines stored in a variable
* Use ">" to truncate and then write output into a file; if file doesn't exist, it's created. Example: echo 'only this line' > file.txt 
* Use ">" to write output into a file (no truncate); if file doesn't exist, it's created. Example: echo 'add me as last line' >> file.txt 
* add "<0/1/2> > <filename>" after a command to write input(0)/output(1)/error(2) streams to a file. Specify `&` to write both 1 and 2. You can also use numbers 3 to 9, those are free descriptors for you to use as you like.
*   add "2> /dev/null" after a command to throw away warning/error messages it might bring up
* declare -p <variable>  # Note: no use of $. Print the variable to check data / data-type


>> Expressions
>> ===========

> Calculate
* age=21
  next_age=$((age+1))       # next_age=22. Using double parentheses makes bash evaluate the expression with math. And you don't need "$" to reference vars (though you can use it anyway)
* i=$(( (i+1) % 4 ))        # you can write more than one math operation within
* (($1 <= 0)) && return     # can be used to evaluate expressions
* echo "3.14/2" | bc        # result is 1
* echo "3.14/2" | bc -l     # result is 1.57000000000000000000

> Inline
* file_text="$(cat "$1")"   # using $() causes the evaluation of everything within, and saving the output into var. You can freely use quotes within, it won't

> Default
* num_of_threads=${1:-$(nproc)}  # use the arg on the left ($1), but if it isn't not provided or if it's empty, the command defaults to the arg on the right ("nproc")
* num_of_threads=${1-$(nproc)}   # use the arg on the left ($1), but if it isn't not provided, the command defaults to the arg on the right ("nproc")


>> Data Types
>> ==========

> Strings
+ By default everything is string
+ Single quotes and double quotes are the same except double quotes allow referencing with "$". If you're using a simple string, it's a good habit to use single-quotes, it tells the reader that things are static.
* echo hi               # echos 'hi'
*   echo "hi"           # echos 'hi'
*   echo 'hi'           # echos 'hi'
* username='Mr. Andersen'
  echo "hi $username"   # echos 'hi Mr. Andersen'
  echo 'hi $username'   # echos 'hi $username'
* ext='txt'
  prefix='2022_08_'
  my_path="/home/smith/${prefix}blood_pressure.${ext}"  # my_path="/home/smith/2022_08_blood_pressure.txt" . The curly braces are necessary for the prefix, so that the variable-name won't mix in with the text
* mystr="${mylist[@]}"                                  # unite multiple elements to a single string (separated with spaces)

> local vars
* local i debug                 # the vars would exist without "local", but it'd be accessible (and changeable) globally. Use "local" within your functions.
  debug="$(ask_user_if_debug)"
  for i in "${numbers[@]}"; do 

> Lists
* list=("${@:2}")           # create list of all args from 2nd onwards
  list+=("another_one")     # append another element to list

> Associative Arrays (similar to hashmap)
+ Don't use "local" - "declare -A" takes care of the scope issues.
* declare -A colors=( [black]='\033[30m' [red]='\033[31m' [green]='\033[32m' [yellow]='\033[33m' [blue]='\033[34m' [purple]='\033[35m' )    # declaration and assignment
  colors[cyan]='\033[36m'                                                                                                                   # assign to key (overwrite if exists) 
  echo -e "${colors[red]}The text is red\033[0m"                                                                                               # read via key
+ for looping over hashmap, refer to Loops section


>> Conditions
>> ==========

* The return value of a function (0 is successful, anything else is failure) can be used as a condition
* You can use brackets (spaced) for simple file/string checks, like so: [ -n "$1" ]
*   filesystem:
*       "-d": does directory exist ; "-f": does file exist ; "-L": does symlink exist ; "-e": does exist in filesystem ; "-s": does exist in filesystem and with non-zero size
*       "-r": is file readable by current user ; "-w": is file writable by current user ; "-x": is file executable by current user
*   emptiness/presence check:
*       "-n": is string non-empty (specifying a variable that doesn't exist returns empty string) 
*       "-z": is string empty (opposite of -n)
*       "-v": is var name set and isn't empty. Similar to -n but without the need to add $ to the var-name
*       "-t": is there input from terminal
*           [ -t 0 ]  :  is input not coming from a terminal
*   comparison:
*       "=": check if equal ; "==": check if equal (bash-specific). Example; is num of args 0: [ $# == 0 ]
*       "-eq": check if equal ; "-ne": check if not equal
*       "-gt": check if greater than ; "-lt": check if less than ; "-ge": greater or equal ; "-le": lesser or equal
* You can use double-brackets (spaced) for complex checks
*       "=~": pattern matching. Example: check if string starts with h: [[ "hello" =~ ^h.*$ ]]
*       operators "&&" and "||": AND and OR within the brackets, no parentheses needed for the conditions
* extra_dist=$(( (a > b) ? (a - b) : 0 ))  # example for ternary in bash (use the "&&", "||" ternary instead when you have a condition in "[]"). The double-parentheses mean you don't need "$" to reference variables and that the math operations get evaluated


>> Loops
>> =====

+ Some of the following examples are collapsed into single lines so they'd be compact:
  * while <condition>; do <command>; done
+ You CAN (and often should) do it like this :
  * while <condition>; do
        # code here
    done

> while
  * while true; do                                                      # infinite loop (needs to exit with "break" within)
  * while IFS= read -r line; do <command>; done < "$bookmarks_file"     # read file line by line (each line saved into var "line")
  * while IFS= read -r cmde; do <command>; done <<< "$text_block"       # read line by line from text. Can also do: << <<< "${text_list[@]}"
  * while [[ $# -gt 0 ]]; do                                            # iterate while there are still args (contents of loop using "shift" to consume the args)
  * while [ -z "$found" ]; do                                           # any condition would do.
  *     while [ ! -e "$iso_file_path" ]; do                             # you can also use "not"

> for
  * for i in {1..20}; do echo "$i"; done                        # go through numbers 1 to 20 (inclusive)
  * for protocol in tcp udp; do                                 # iterate on given strings. You might want to put the strings in quotes (for protocol in 'tcp' 'udp'; do) so that your IDE would color-code them as such. 
  *     for protocol in 'tcp' 'udp'; do                         # Same. You might want to put the strings in quotes so that your IDE would color-code them as such. 
  * mylist=('apples' 'oranges' 'lemons')
    for item in ${mylist[@]}; do                                # iterate on list items
  * numbers1="1 2 3"; numbers2="2 4 6"; numbers2="10 20 30"; 
    for number in $numbers1 $numbers2 $numbers3; do             # iterate on all elements (separated by whitespace) within all strings  
  * for key in "${!myHashMap[@]}"; do echo "k: $key v: ${myHashMap[$key]}"; done  # iterate on "hashmap" keys
  * for value in "${myHashMap[@]}"; do                          # iterate on "hashmap" values
  * for ((i=0; i<$num_of_threads; i++)); do                     # c-style for-loop.
  *     for ((i=0; i<$num_of_threads; ++i)); do                 # also works
  *     for ((i=0, j=1; i<$num_of_threads; i++, j++)); do       # also works


>> shortcuts
>> =========

> Terminal
* CTRL+C : terminate current thread
* CTRL+A : Jump to start of line
*   CTRL+E : Jump to end of line 
* ALT+BACKSPACE : delete cursor's last word (instead of holding backspace for a while)
* CTRL+L : clear screen
* CTRL+Z : send to background (leave any interactive UI for a while).
*   fg  # return process to foreground (resume the UI of the process). If you have several stuff in the background stack, this pops the last one

