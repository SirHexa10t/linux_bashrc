# A quick overview of how rust works, and how to learn it
* Interactive exercise: "rustlings" at  https://github.com/rust-lang/rustlings
* Learn Rust "in half an hour":  https://fasterthanli.me/articles/a-half-hour-to-learn-rust
* Books
*  https://doc.rust-lang.org/book/print.html 
*  https://doc.rust-lang.org/rust-by-example/print.html


+ Rust is a 0-cost-abstactions memory-safe (without involving a garbage-collector!) language that goes both low/high-level, and provides thread safety, plus very helpful compile-error messages.
+  "It's Haskell, standing on Lisp's shoulders, hiding in C's coat, to sneak into production (the fancy nightclub where all the popular languages hang out)" ~ No_Boilerplate, watch?v=voRBS0r4EyI


>> TYPES
>> =====

> Scalar types
+ integers: `i8`, `i16`, `i32` (default), `i64`, `i128`, and `isize` which adapts to your architecture (will be i64 if you're on x64)
+   to use unsigned integers, just use 'u' instead of 'i', including `usize`
+   to assign numbers based on different bases:
+     Dec: 1_200_000   (a readable way to write 1.2 million, the underscores '_' are not mandatory)
+     Hex:	0xff
+     Oct:	0o77
+     Bin:	0b1111_0000
+     Byte (u8 only): b'A'
+ floating points: `f32`, `f64` (default)



> Arrays
let my_array: [i32; 3] = [1, 2, 3];  // array

let v: Vec<i32> = Vec::new();  // vector - basically "list" in Java (can change size)
let my_vec = vec![1, 2, 3];


let my_tuple: (i32, f64, char) = (42, 3.14, 'a');  // tuple - an array with multiple types


> Other types
+ char, bool

+ Primitives have callable functions too (unlike Java). Example: 'my_char.is_alphabetic()'



>> PRINTING
>> ========

> Printed strings are f-strings by default
let num = 12;
println!("number is: {num}.");

> Debug-printing. Prints collections.
println!("{:?}", my_vector);



>> CONVERSIONS
>> ===========

> Convert into Vec
my_array.to_vec();  // items are copied, not pointed-at again

> Convert into Set 
let my_set: HashSet<_> = my_array.iter().cloned().collect();  // array to set
let my_set: HashSet<_> = my_vector.into_iter().collect();  // vector to set



>> DECLARATIONS AND FUNCTIONS
>> ==========================

+ Everything is immutable by default. You have to specify "&mut" to have mutability

let x: i32 = 42;  // Assign a variable. The type-declaration is optional

> Strings
let repeated_string: String = "-=".repeat(100);  // repeats the string

let s = String::from("hello world");
let hello = &s[0..5];  // string "slice"
let world = &s[6..11];


> Arrays
let pair = ('a', 17);  // tuple - a fixed-size list
pair.0;  // access at index 0 of a tuple, as if it were a field

let long_array: [i32; 100] = [42; 100];  // construct an array of 100 items, all of which are the number "42".
let arr: [&str; 100] = ["hi" ; 100];  // construct an array of 100 items, all of which are the string "hi"


> blocks evaluate values
let x = { 
    let y = 1;
    let z = 2;
    y + z  // the final line is "tail", and it's what the block will evaluate to. It's the same as writing: `return y+z;`
};  

> function definition
fn ret_four() -> i32 {
    4
}


> returning multiple values
let (_, right) = slice.split_at(middle);  // save tuple return into 2 variables, throw the first one (meaning of underscore)


> You can go into namespaces using ::
let least = std::cmp::min(3, 8); // this is 3
let x = "amos".len(); // this is 4
let x = str::len("amos"); // this is also 4


> instantiating:
let v3 = MyStruct {
    x: 14.0,
    ..v2  // "all the rest from var v2" - all fiels which haven't been specified yet are copied over. Must be specified in last line, and only once
};

> creating variables from an object's fields
let Vec2 { x, y } = v2;  // declare x and y which have the same value as v2 had
let Vec2 { x, .. } = v2;  // declare x which has the value of v.x , and the rest is ignored


> generic function
fn foobar<L, R>(left: L, right: R) {
    // do something with `left` and `right`
}
fn print<T: Display>(value: T) {
    println!("value = {}", value);
}
fn print<T: Debug>(value: T) {
    println!("value = {:?}", value);
}
fn compare<T>(left: T, right: T) where T: Debug + PartialEq, {  // use "where" to define traits for generics
    println!("{:?} {} {:?}", left, if left == right { "==" } else { "!=" }, right);
}

> Closures (basically defining a lambda)
let add = |a, b| a + b;  // call like so: `add(3, 5);`


> Passing arguments by reference
fn read_vector(mut v: &Vec<i32>) -> Vec<i32> {  // v is passed by reference, i.e. read-only. Ownership isn't transferred to the function (original is still accessible)
fn consume_vec(mut v: Vec<i32>) -> Vec<i32> {  // ownership is transferred (original becomes inaccessible), v can be consumed but it's still immutable, so the elements can't be modified
fn modify_vector(v: &mut Vec<i32>) -> Vec<i32> {  // modify the contents of a vector, WITHOUT transferring ownership
+ of course, it's not possible to do `mut v: &Vec<i32>`

for element in v.iter_mut() { *element *= 2; }  // editing elements within mutable vector v

+ "const" functions are deterministic and have no side-effects ("almost" pure) and thus can't print. To circumvent that, there's a crate called "const_panic" that includes assertions
+   const functions are only pure at runtime, so you can evaluate impure source-code to construct a function that's pure.

+ return "Infallible" from a function if the function never returns (runs forever)


>> LOOPS
>> =====

> Loop n times (without caring about each iteration's number)
for _ in 0..10 { /*code here*/ }

> Loopint on elements with Iterator
[0, 1, 2, 3].iter().for_each(|x| println!("iteration {x}"));

loop {
    // code ...
}

>> ITERATORS STREAMS
>> =================

> Similar to Java's Streams
let x = vec![1, 2, 3, 4, 5, 6]
    .iter()
    .map(|x| x+3)
    .fold(0, |x, y| x+y);


> Iterating on infinite ranges
let v: Vec<i32> = (1..).filter(|x| x % 2 == 0).take(5).collect();  // result is [2, 4, 6, 8, 10]

> Iterating on 1-to-6 INCLUSIVE
let my_vector: Vec<i32> = (1..=6).filter(|x| x % 2 == 0).take(5).collect();

> Iterating on 1-to-5 (1-6 exclusive)
let my_vector: Vec<i32> = (1..6).filter(|x| x % 2 == 0).take(5).collect();

+ Usually you'd want to use iter()
+ You can use into_iter() if you want to take ownership of the elements and consume them (the original collection would be gone)
+ Using iter_mut() allows you to modify the values within the collection



>> ITERATION ORDER
>> ===============

> Iterator goes from start to end through all steps in each iteration
[2, 3, 5, 7].iter()
    .map(|x| {print!("{x}, "); x+10 } )
    .map(|x| {print!("{x}, "); x+100 } )  // iterator's "map" calls are Lazy (won't run if the data won't be used), so we add "for_each" at the end. 
    .for_each(|x| { print!("{x}, "); });  // prints:  2, 12, 112, 3, 13, 113, 5, 15, 115, 7, 17, 117, 

> Running without iterator does each step for all elements at a time
[2, 3, 5, 7]
    .map(|x| {print!("{x}, "); x+10 } )
    .map(|x| {print!("{x}, "); x+100 } )
    .map(|x| {print!("{x}, "); x } );  // prints:  2, 3, 5, 7, 12, 13, 15, 17, 112, 113, 115, 117, 



>> ITERATORS OPERATIONS
>> ====================
+ reference:  https://doc.rust-lang.org/std/iter/trait.Iterator.html

> Filtering and picking
+ "filter": Filters elements based on a predicate.
  * let evens_doubled: Vec<i32> = (1..=5).filter(|x| x % 2 == 0).map(|x| x * 2).collect();  // "filter" isn't consuming, so doing this is fine
  * [0, 1, 2].iter().filter(|&&x| x > 1);  // iterator's filter takes a reference (to the iterator), and the iterator is already referencing. So it's double-reference. Also possible predicates: `|x| **x > 1` or `|&x| *x > 1`
+ "take": iterator yields (up to) n elements, then ends
  * let my_vector: Vec<i32> = (1..=6).filter(|x| x % 2 == 0).take(5).collect();  // result is [2, 4, 6] , so "take" is a match-limiter, not an obligation
+ "take_while" / "skip_while": Takes/skips elements while a predicate is true. Basically "filter" that stops as soon as an item doesn't match.
  * let taken: Vec<i32> = (1..=5).take_while(|&x| x <= 3).collect();  // match by reference (&x) to avoid moving the original values out of the iterator.
+ "skip": Skips a specified number of elements.
  * let skipped: Vec<i32> = (1..=5).skip(2).collect();  // result is: [3, 4, 5]
+ "rposition": reverse-lookup for an element that satisfies a condition. Returns the index of found item
  * [-1, 2, 3, 4].iter().rposition(|&x| x >= 2)  // returns Some(3) because that's the first index from the end that satisfies the check
+ "step_by": change iteration step-size. Must not set 0.    
  * [0, 1, 2, 3, 4, 5].iter().step_by(2)  // iterate on [0, 2, 4]
+ "scan": define how the iterator progresses and yields values. Takes into account the encountered element.
  * let mut iter = [1, 2, 3, 4].iter().scan(1, |state, &x| { *state = *state * x; if *state > 6 {return None;} Some(-*state) });  // this mess yields: -1, -2, -6
+ "fuse": makes it so that once the iterator returns None once, it'll only return None afterwards
  * let mut iter = iter.fuse();  // after iter().next() returns None once, it won't start returning Some(value) again.

> Transformation
+ "map": Transforms each element of the iterator using a closure.
  * let doubled: Vec<i32> = (1..=5).map(|x| x * 2).collect();  // result is: [2, 4, 6, 8, 10]
+ "filter_map": same as "map", but the None results get thrown out
    + something like this: `.filter_map(|p| p.last_name)` instead of: `.filter(|p| p.last_name.is_some()).map(|p| p.last_name.unwrap())`

> Result
+ "collect" / "collect_into": Collects the elements into a specified collection type / into an existing collection
  * let vec: Vec<i32> = (1..=5).collect();  // or:
  * a.iter().map(|&x| x * 2).collect_into(&mut vec);

> Arbitrary actions
+ "for_each": do an action for each element. Modify external collections / print the elements...
  * numbers.iter().for_each(|&x| squares.push(x * x));
  * let mut numbers = vec![1, 2, 3, 4, 5];
    numbers.iter_mut().for_each(move |x| { *x *= 2; });  // Modify the value in place by taking ownership with `move` (the original vector is updated)
+ "inspect": do an action for each element, but pass them on afterwards
  * lines.iter().map(|line| line.parse::<i32>()).inspect(|num| { if let Err(ref e) = *num { println!("Parsing error: {e}"); } }).filter_map(Result::ok).sum();  // useful for debugging

> Collapse into single value
+ "any" / "all": returns a bool after checking if any/all elements satisfy a predicate
  * let any_even = (1..=5).any(|x| x % 2 == 0);
  * let all_even = (1..=5).all(|x| x % 2 == 0);
+ "find": returns a pointer to the first element that satisfies a predicate. If none satisfy it, it returns None.
  * [1, 2, 3].iter().find(|&&x| x == 2)  // returns: Some(&2)
+ "find_map": basically "find", without the reference. `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`
  * ["lol", "NaN", "2", "5"].iter().find_map(|s| s.parse().ok());
+ "count": returns the number of elements
  * [1, 2, 3, 4, 5].iter().filter(|&&x| x > 3).count();  //count returns: 2
+ "min" / "max": Finds the minimum/maximum element.
  * let min = (1..=5).min().unwrap();
+ "sum": sums-up the elements; sum of an empty iterator is 0.
  *  [1, 2, 3].iter().sum();  // result: 6
+ "fold": Accumulates values using an initial state and a closure.
  * let sum = (1..=5).fold(0, |acc, x| acc + x);  // sum
  * let result = numbers.iter().fold(zero, |acc, &x| { format!("({acc} + {x})") });  // construct a string factoring all elements
+ "size_hint": get an estimate of the iterator's remaining length in the form: (minimum-estimate, maximum-estimate)

> to 2D iteration
+ "enumerate": Wraps each element with its index.
  * let indexed: Vec<(usize, i32)> = (1..=5).enumerate().collect();  // result is: [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]
+ "zip": Combines two iterators into a single iterator of pairs.
  * let zipped: Vec<(i32, char)> = (1..=3).zip('a'..='c').collect();  // result is: [(1, 'a'), (2, 'b'), (3, 'c')]

> Extending / flattening iteration
+ "chain": make 2 iterators into 1. This iterator first goes over iterator1 and then over iterator2. 
  * let mut iter = a1.iter().chain(a2.iter());
+ "cycle": iterates endlessly (starts over after end). You can limit it (exit early) with something like `take()`, or controll when it progresses by calling `next()`.
+ "flatten": turn a list of lists into one long plain list
  * let flattened = vec![vec![1, 2, 3, 4], vec![5, 6]].into_iter().flatten().collect::<Vec<u8>>();
+ "flat_map": iterate on elements within the elements. The equivalent of doing `iter.map(f).flatten()`
  * let merged: String = words.iter().flat_map(|s| s.chars()).collect();  // get all words' characters consecutively
  * (0..5).flat_map(|x| x * 100 .. x * 110)  // expand each element into tens of elements
+ "unzip": the opposite of "zip" - takes apart pairs of containers (basically 2D coordinates)
  * let (left, right): (Vec<_>, Vec<_>) = [(1, 2), (3, 4), (5, 6)].iter().cloned().unzip();  // left=[1, 3, 5] , right=[2, 4, 6]
+ "interperse" / "interperse_with": insert separator between elements using elements' Clone / specified function
  * let mut happy_emojis = [" ❤️ ", " 😀 "].iter().copied();
    let separator = || happy_emojis.next().unwrap_or(" 🦀 ");
    let result = ["Hello", "to", "all", "people", "!!"].iter().copied().intersperse_with(separator).collect::<String>();  // result: "Hello ❤️ to 😀 all 🦀 people 🦀 !!"

> Reuse iterator
+ "by_ref": address an iterator without consuming it, still retaining ownership of original iterator. Used often with "take" / "take_while" / "skip_while"...
  * let mut words = ["hello", "world", "of", "Rust"].into_iter();
    let hello_world: Vec<_> = words.by_ref().take(2).collect();
    let of_rust: Vec<_> = words.collect();
+ "cloned": like "by_ref", but with cloned elements. But the `clone` method isn't guaranteed to be called. For better performance, clone late.
  * let slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();
  * let faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();
+ "copied": same as "cloned", but calls `copy` (simple / bitwise) instead of `clone`. The exact same as calling: `.map(|&x| x)`

> Comparison
+ "eq" / "eq_by": compare 2 iterators, by their elements / by a function of 2 compared elements
  * assert!(iter1.eq(iter2));
  * assert_eq!([1].iter().eq([1, 2].iter()), false);
+ "cmp" / "cmp_by": similar to "eq", but is about ordering. So it checks if all elements in one iterator are lesser/equal/greater than the other iterator's
  * assert_eq!([1, 2, 3].iter().cmp([4, 5, 6].iter()), Ordering::Less);
+ "ge" / "gt" / "le" / "lt" / "ne": returns bool for whether iter1's elements are lexicographically >= / > / <= / < / != iter2's.
  * assert_eq!([1, 2].iter().ge([1].iter()), true);


> Nightly-only (experimental) API:
+ "array_chunks": divides the iteration to N elements at a time
+ "eq_by": specified above
+ "interperse" / "interperse_with": specified above

TODO: 
is_partitioned
intersperse
intersperse_with
is_partitioned
is_sorted
is_sorted_by
is_sorted_by_key
last
map_while
map_windows
max_by
max_by_key
min_by
min_by_key
next_chunk
nth
partial_cmp
partial_cmp_by
partition
partition_in_place
peekable
position
product
reduce
rev
try_collect, try_find, try_fold, try_for_each, try_reduce



>> CONVENIENT RETURNS
>> ==================

> "if" can return values
let habitat = if identifier == 1 {
    "Beach"
} else if identifier == 2 {
    "Burrow"
} else if identifier == 3 {
    "Desert"
} else {
    "Unknown"
};


> "match" (Rust's "switch") can return values (and execute code of-course)
let result = match number {
    0           => "zero",
    1           => "one",
    3 | 5 | 7   => "an interesting number",  // multiple matches can be lumped together!
    8..=99      => "random boring number"   // matches can also be made in ranges
    _           => "other",
};


>> CONDITIONAL STATEMENTS
>> ======================

> Eliminate newlines to make "if" ternary-like
let result = if condition { a } else { b };

if let MyStruct { odd: true, value } = n {  // matching 'n' to a pattern:  check whether n is an instance of MyStruct, and if n.odd is true 
    // code to execute if the pattern matches
    // "value" is declared in this scope
}

> performing switch on a statement
match feeling_lucky {
    true => 6,
    false => 4,
}


> "Number" here is a custom struct. 
fn print_number(n: Number) {
    match n {
        Number { value: 1, .. } => println!("One"),
        Number { value: 2, .. } => println!("Two"),
        Number { value, .. } => println!("{}", value),
        // if that last arm didn't exist, we would get a compile-time error
    }
}


fn print_number(n: Number) {
    match n.value {
        1 => println!("One"),
        2 => println!("Two"),
        _ => println!("{}", n.value),
    }
}



>> STRUCTS
>> =======

> 3 types of structs:
struct Person {  // Normal (Classic) Struct
    name: String,
    age: u32,
}

struct Point(i32, i32);  // Tuple Struct (field names are just 0, 1, 2, ...)

struct Marker;  // Unit-like Struct. They don't have any fields and are useful, for example, in generics or as markers.


> Update off of another object (very convenient with a default template)
let person2 = Person {
    age: 31,
    ..person1  // we already have person1, we want a similar Person but with different age
};


> adding logic (functions) to structs
impl Number {
    fn is_strictly_positive(self) -> bool {
        self.value > 0
    }
}


+ interface - you can apply functions to any structure, as long as at least one of the two (interface/structure) is yours

> own interface on own struct
trait Signed {
    fn is_strictly_negative(self) -> bool;
}

impl Signed for Number {
    fn is_strictly_negative(self) -> bool {
        self.value < 0
    }
}


> foreign interface on own struct
impl std::ops::Neg for Number {
    type Output = Number;

    fn neg(self) -> Number {  // can also write "-> Self", the impl block would "know" it's referring to Number
        Number {
            value: -self.value,
            odd: self.odd,
        }        
    }
}

fn main() {
    let n = Number { odd: true, value: 987 };
    let m = -n; // this is only possible because we implemented `Neg`
    println!("{}", m.value); // prints "-987"
}


> Some traits are so common, they can be implemented automatically by using derive
#[derive(Clone, Copy)]  
struct Number {
    odd: bool,
    value: i32,
}



>> VARIABLE LIFETIME, REFERENCE/CLONE/COPY
>> =======================================

+ Copy is just bitwise Clone (for simple objects)

+ Like in C/C++, '&' means "address of" (reference), and '*' means "value at pointed address".

> "mutable aliasing" rule: only one mutable reference at a time (ensures memory safety)
let mut x = 100;
let r1 = &s;  // fine
let r2 = &s;  // fine
let y = &mut x;  //fine
let z = &mut x;  // can't do that! Because we still need to use 'y' after this line
*y += 100;  // if you move this above z's declaration, everything would be fine.
*z += 1000;


> can't transfer the point a non-Copy object's pointer twice based on the first pointer  
let n = Number { odd: true, value: 51 };
let m = n; // `n` is moved into `m`
let o = n; // error: use of moved value: `n`


+ Rust has a 1-owner rule; every object can have only 1 variable pointing to it.
+   Passing object as arg transfers ownership, unless "&" is added to pass it as "borrowed"
+ Rust has a 1-writer rule; An object can be edited by a function only once
+   Passing an object with "&mut" (within the function-call) allows the modification of the object. You can't do it twice in a row, as stated.

> Use & to pass an object to a function as "borrowed", to prevent moving the pointer permanently
fn print_number(n: &Number) {
    println!("{} number {}", if n.odd { "odd" } else { "even" }, n.value);
}

fn main() {
    let n = Number { odd: true, value: 51 };
    print_number(&n); // `n` is borrowed for the time of the call
    print_number(&n); // `n` is borrowed again
}


> Trait methods can also take self by reference or mutable reference:
impl std::clone::Clone for Number {
    fn clone(&self) -> Self {
        Self { ..*self }
    }
}


> There's no method for Copy, this is the implementation.
impl std::marker::Copy for Number {}

fn main() {
    let n = Number { odd: true, value: 51 };
    let m = n.clone();
    let o = n.clone();
    let m2 = n;  // `m2` is a copy of `n`, the pointer isn't moved like for non-Copy structs
}




>> ANNOTATIONS
>> ===========

> Builder

use derive_builder::Builder;

#[derive(Builder, Debug)]
struct Person {
    #[builder(default = "String::from(\"Unknown\")")]
    name: String,

    #[builder(default = "0")]
    age: u32,
}

// use like that:
let person_with_defaults = PersonBuilder::default().build().unwrap();


#[derive(Debug)]  // allows debug-printing


>> TESTING / ASSERTING
>> ===================

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn ten_is_bigger_than_eight() {
        assert_eq!(10, bigger(10, 8));
    }

    #[test]
    fn fortytwo_is_bigger_than_thirtytwo() {
        assert_eq!(42, bigger(32, 42));
    }
 
    #[test]
    fn equal_numbers() {
        assert_eq!(42, bigger(42, 42));
    }
}


>> NEEDS TO BE ADDED !!!!!!!!!!!!!!!!!!!!!!
>> =================

TODO: very interesting crates
color-eyre - pretty error handling
rstest - testing framework, can use fixtures
const_panic - string formatting for asserts
EventEmitter
Tokio - async await handling, with axum (web framework)
Rayon - parallelism (instead of Tokio. It's built on Rust's side-effect system)
testing with `cargo test`
benchmarking with criterion
clap - command line args parser
bevy - building games
wgpu - programming for GPU
embassy - embedded systems
nom - parser
Cargo Lambda - build binaries for AWS Lambda
diesel - SQL quearies
sqlx - sql queries (better than diesel?)


TODO maybe - external tool:
Slint UI design in Rust:
    "you need to build a RUST desktop app!!": https://www.youtube.com/watch?v=7aFgeUG9TK4
    https://slint.dev/docs

Blender as a level-editor, with Rust code:
    "Use Blender as a Bevy Editor": https://www.youtube.com/watch?v=PRDUH0JUS_A
    https://github.com/rust-adventure/yt-bevy-blender

TODO: lints (cover what those are
> solid setup:
[lints.rust]
unsafe_code = "forbid"

[lints.clippy]
enum_glob_use = "deny"
pedantic = "deny"
nursery = "deny"
unwrap_used = "deny"  // run clippy in a terminal to see what was the first error (the one you need to fix)
    // `bacon clippy` is "better" than `cargo clippy`?


> optimizing size of release-builds (from: https://github.com/johnthagen/min-sized-rust )
[profile.release]
opt-level = 'z'     # optimize for size
lto = true          # Optimize at the link stage. This can, for example, remove dead code and often times reduces binary size
codegen-units = 1   # reduced to increase optimizations
panic = 'abort'     # abort on panic
strip = "symbols"   # strip symbols from binary


>> SAMPLES
>> =======

> Parallelism with Rayon
use rayon::prelude::*;
fn sum_of_squares(input: &[i32]) -> i32 {
    input.par_iter()
        .map(|&i| i*i)
        .sum()
}








